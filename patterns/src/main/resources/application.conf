akka.actor.deployment {
  /poolRouter {
    router = balancing-pool
    nr-of-instances = 5
  }
}

akka {

  # Event handlers to register at boot time
  # (Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  logLevel = DEBUG
  log-config-on-start = on

  debug {
    # logging of all user-level messages that are processed by
    # Actors that use akka.event.LoggingReceive enable function of
    # LoggingReceive, which is to log any received message at
    # DEBUG level
    receive = on
    # enable DEBUG logging of all AutoReceiveMessages
    # (Kill, PoisonPill and the like)
    autoreceive = on
    # enable DEBUG logging of actor lifecycle changes
    # (restarts, deaths etc)
    lifecycle = on
    # enable DEBUG logging of all LoggingFSMs for events,
    # transitions and timers
    fsm = on
    # enable DEBUG logging of subscription (subscribe/unsubscribe)
    # changes on the eventStream
    event-stream = on
  }

  remote {
    # If this is "on", Akka will log all outbound messages at
    # DEBUG level, if off then they are not logged
    log-sent-messages = on
    # If this is "on," Akka will log all inbound messages at
    # DEBUG level, if off then they are not logged
    log-received-messages = on

    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "0.0.0.0"
      port = 2553
    }
  }

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
  }

}